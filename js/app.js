"use strict";

var level = 1;
var lifes = 3;
var pause = false;
var points = 0;
var maxSpeed = 400;
var allItems = new Map();

//function to choose randomly between three numbers
var randomNum = function(){
    var num = Math.floor((Math.random()*10)/3);
    return num;
};

// get random X coordenate for enemies
var getX = function() {
    var num = 0;
    switch(randomNum()){
        case 0:
            num = -150;
            break;
        case 1:
            num = -350;
            break;
        default:
            num = -550;
    }
    return num;
};

//get random Y coordanate for enemies
var getY = function() {
    var num = 0;
    switch(randomNum()) {
        case 0:
            num = 60;
            break;
        case 1:
            num = 143;
            break;
        default:
            num = 226;
    }
    return num;
};

//get random X coordanate for items (gems, or rocks)
var getItemX = function() {
    var num = 0;
    switch(Math.floor(Math.random()*10)){
        case 0:
            num = 0;
            break;
        case 1:
            num = 101;
            break;
        case 2:
            num = 202;
            break;
        case 3:
            num = 303;
            break;
        case 4:
            num = 404;
            break;
        case 5:
            num = 505;
            break;
        case 6:
            num = 606;
            break;
        case 7:
            num = 707;
            break;
        case 8:
            num = 808;
            break;
        case 9:
            num = 909;
            break;
    }
    return num;
};

//get random speed for enemies, based on a given maxSpeed
var getSpeed = function() {
    return Math.floor(Math.random() * (maxSpeed - 100 + 1)) + 100;
};


var levelUp = function() {
    //update counters, display them on screen
    level++;
    $("#level").text("Level " + level);
    points += 100;
    $("#points").text(points + " pts");

    //when level up, delete all gems and hearts displayed
    deleteGemsHearts();

    //using random number generated by getItemX to randomly generate
    //hearts items.

    if (getItemX()%5===0) {
        var heart = new Heart();
        allItems.set(heart.key, heart);
    }

    if (level<=8 || (level>=25 && level%5 === 0)) {
        createEnemies();
    }

    if((level>=10 && level<26) && level%2===0) {
        var rock = new Rock();
        allItems.set(rock.key, rock);
    }

    if (level>=10 && level%2===1) {
        var gem = new Gem();
        allItems.set(gem.key, gem);
    }

    if (level > 30) {
        maxSpeed = 500;
    }

    //if max level reached, won Modal is displayed. Player can
    //choose to start a new game
    if (level === 40) {
        pause = true;
        $("#wonModal").modal('show');
        $(".restart").click(function() {
                restart();
            });
    }
};

//manage life counter, this function receives
//a boolean value
var addLife = function(up) {
    //lifes counter is displayed to player as a list of hearts
    var elements = $("ul").children();
    var elem;
    //plus one life when player catches a heart item
    if (up === true) {
        if (lifes < 3) {
            elem = elements[lifes];
            //refactor hearts counter displayed to user
            $(elem).toggleClass('fontawesome-heart-empty fontawesome-heart');
            lifes++;
        }
    } else { //minus one life when player collides with bug
        lifes--;
        elem = elements[lifes];
        //refactor hearts counter displayed to user
        $(elem).toggleClass('fontawesome-heart fontawesome-heart-empty');

        //game over, show game over modal, player can choose to start a new game
        if (lifes === -1) {
            pause = true;
            //choose an image to display on modal
            gameOverImg();
            $("#gameOverModal").modal('show');
            $(".restart").click(function() {
                restart();
            });
        }
    }
};

//function that resets variables with initial values
var restart = function() {
    level = 1;
    lifes = 3;
    points = 0;
    maxSpeed = 400;
    allItems.clear();
    allEnemies = [];
    player.x = 404;
    player.y = 390;

    //reset info displayed on screen
    $("#level").text("Level " + level);
    $("#points").text(points + " pts");

    var elements = $("ul").children();
    //couldn't iterate with forEach loop
    for (var i = 0; i < 3; i++) {
        var heartElem = elements[i];

        //when used toggleClass found a bug
        $(heartElem).removeClass('fontawesome-heart-empty');
        $(heartElem).addClass('fontawesome-heart');
    }

    startGame();

};

//function used to select character
var startGame = function() {
    var selected = null;

    $("#startModal").modal('show');

    $(".char-elem").click(function() {

        //remove and add classes to show player which caracter was selected
        if (selected !== null) {
            $(selected).removeClass('char-selected');
        }

        //define new player sprite according to choosen caracter
        player.sprite = $(this).attr('src');
        $(this).addClass('char-selected');
        selected = $(this);
    });

    $("#startButton").click(function() {
        //Bug-found function being called more than once,
        //if was used to assure only one enemy is created each time a new game
        //starts
        if (allEnemies.length === 0) {
            createEnemies();
        }
        pause = false;
    });
};

//function to choose random game over images
var gameOverImg = function() {
    var imageGameOver = $("#game-over-img");
    var r = randomNum();
    console.log(r);
    switch(r){
        case 0:
            $(imageGameOver).attr('src', 'images/unagi.jpg');
            console.log("unagi");
            break;
        case 1:
            $(imageGameOver).attr('src', 'images/give-up.jpg');
            console.log("giveup");
            break;
        case 2:
            $(imageGameOver).attr('src', 'images/tugging.jpg');
            console.log("tugging");
            break;
        default:
            $(imageGameOver).attr('src', 'images/waste.jpg');
            console.log("waste");
    }
};

// Enemies our player must avoid
var Enemy = function() {
    // Variables applied to each of our instances go here,
    // we've provided one for you to get started
    this.x = getX();
    this.y = getY();
    this.speed = getSpeed();
    // The image/sprite for our enemies, this uses
    // a helper we've provided to easily load images
    this.sprite = 'images/enemy-bug.png';
};

// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function(dt) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.
    this.x = this.x + this.speed*dt;

    //if enemie crossed screen get new x and y coordenates
    //also get a new value for speed
    if (this.x >= 1010) {
        this.x = getX();
        this.y = getY();
        this.speed = getSpeed();
    }
};

// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

// Now write your own player class
// This class requires an update(), render() and
// a handleInput() method.

var Player = function() {
    this.x = 404;
    this.y = 390;
    //xplus and y plus used to manage rock interactivity
    this.xplus = 0;
    this.yplus = 0;
    this.sprite = 'images/char-boy.png';

};

//handle player's playing area borders and collision with items
Player.prototype.update = function() {
    //player reaches water
    if (this.y === -25) {
        this.x = 404;
        this.y = 390;
        levelUp();
    }

    //contain player into playing area
    if (this.y >= 390) {
        this.y = 390;
    }

    if (this.x <= 0) {
        this.x = 0;
    }

    if (this.x >= 909) {
        this.x = 909;
    }

    //manage rock, gem and heart items
    if (allItems.size >=0) {
        allItems.forEach(function(item) {
            if (player.x===item.x && (item.y-player.y<=5 && item.y-player.y>=0)) {

                if (item instanceof Rock) {
                    //if item is a Rock, return player to previous position
                    //giving the efect of player being blocked by rock
                    player.x = player.x - player.xplus;
                    player.y = player.y - player.yplus;
                } else {
                    if (item instanceof Gem) {
                        //if item is gem, add points and delete gem from map
                        points = points + item.gemValue;
                        $("#points").text(points + " pts");
                        allItems.delete(item.key);
                    } else {
                        if (item instanceof Heart) {
                            addLife(true);
                            allItems.delete(item.key);
                        }
                    }
                }
            }
        });
    }
};

Player.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

//moves player through the playing area
Player.prototype.handleInput = function(key) {
    this.xplus = 0;
    this.yplus = 0;

    switch (key) {
        case 'left':
            this.x = this.x - 101;
            this.xplus = -101;
            break;
        case 'up':
            this.y = this.y - 83;
            this.yplus = -83;
            break;
        case 'right':
            this.x = this.x + 101;
            this.xplus = 101;
            break;
        case 'down':
            this.y = this.y + 83;
            this.yplus = 83;
            break;
    }
};

//Rocks, Gems and Hearts
var Item = function() {
    this.x = getItemX();
    this.y = getY();
    //create key to store item on map
    this.key = this.x.toString()+this.y.toString();
    this.checkCoords();
};

//validates that another item doesn't have the same position
//if it does, new x and y coordenates are generated
//as well as a new key
Item.prototype.checkCoords = function() {

        while (allItems.has(this.key)) {
            this.x = getItemX();
            this.y = getY();
            this.key = this.x.toString()+this.y.toString();
        }
};

Item.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

var Rock = function() {
    this.sprite = 'images/Rock.png';
    Item.call(this);
};

Rock.prototype = Object.create(Item.prototype);
Rock.prototype.constructor = Rock;

var Gem = function() {
    this.randomColor();
    Item.call(this);
};

Gem.prototype = Object.create(Item.prototype);
Gem.prototype.constructor = Gem;

//randomly generate a different color gem
Gem.prototype.randomColor = function(){
    var num = randomNum();

    if (num === 0) {
        this.sprite = 'images/Gem-Blue.png';
        this.gemValue = 300;
    }else {
        if (num === 1) {
            this.sprite = 'images/Gem-Orange.png';
            this.gemValue = 200;
        }else {
            this.sprite = 'images/Gem-Green.png';
            this.gemValue = 100;
        }
    }
};

var Heart = function() {
    this.sprite = 'images/Heart.png';
    Item.call(this);
};

Heart.prototype = Object.create(Item.prototype);
Heart.prototype.constructor = Heart;

//delete all Gems and Hearts that are in map
var deleteGemsHearts = function() {
    allItems.forEach(function(item) {
        if (item instanceof Gem || item instanceof Heart) {
            allItems.delete(item.key);
        }
    });
};

// Now instantiate your objects.
// Place all enemy objects in an array called allEnemies
// Place the player object in a variable called player
var allEnemies = [];
var player = new Player();

var createEnemies = function() {
    allEnemies.push(new Enemy());
};

// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        32: 'space'
    };

    //show or hide pause game modal
    if (e.keyCode===32) {
        pause = !pause;
        if (pause === false) {
            $("#pauseModal").modal('hide');
        } else {
            $("#pauseModal").modal('show');
        }
    }
    //block player to move caracter when game is paused
    if (pause===false) {
        player.handleInput(allowedKeys[e.keyCode]);
    }
});
